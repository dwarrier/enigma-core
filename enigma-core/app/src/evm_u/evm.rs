#![allow(dead_code,unused_assignments,unused_variables)]
extern crate sgx_types;
extern crate sgx_urts;

use sgx_types::*;

use std::iter::FromIterator;
//failure 
use failure::Error;
use hex::ToHex;

extern {
    fn ecall_evm(eid: sgx_enclave_id_t,
                 retval: *mut sgx_status_t,
                 bytecode: *const u8, bytecode_len: usize,
                 callable: *const u8, callable_len: usize,
                 callable_args: *const u8, callable_args_len: usize,
                 preprocessor: *const u8, preprocessor_len: usize,
                 callback: *const u8, callback_len: usize,
                 output: *mut u8, signature: &mut [u8; 65],
                 result_length: &mut usize) -> sgx_status_t;
}


pub struct EvmInput {
    code: String,
    data: String,
}

// this is the input after its being parsed from the server (originally came from surface)
#[derive(Serialize, Deserialize, Debug)]
pub struct EvmRequest{
    #[allow(dead_code)]
    pub bytecode :      String,
    pub callable :      String,
    pub callable_args :  String,
    pub preprocessor :  Vec<String>,
    pub callback :      String,
}


impl EvmRequest {
     pub fn new(_bytecode:String,_callable:String,_callable_args:String,_preprocessor:Vec<String>,_callback:String) -> Self {
        EvmRequest {
            bytecode : _bytecode,
            callable : _callable, 
            callable_args : _callable_args, 
            preprocessor : _preprocessor,
            callback : _callback,
        }
    }
}   

// this is the result from the evm computation that will be send to the server and propagated to surface. 
#[derive(Serialize, Deserialize, Debug)]
pub struct EvmResponse{
    errored : bool,
    result : String,
    signature : String,
}


// this function is called by the the server componenet upon an execevm command from surface
// very likely that this functions will require an SgxEnclave object.

// TODO:: handle error and failure correctly with the 'result' variable returned from the enclave
// This should be changed
// the length of the result returned by EVM should be checked in advance
const MAX_EVM_RESULT: usize = 100000;
pub fn exec_evm(eid: sgx_enclave_id_t, evm_input: EvmRequest )-> Result<EvmResponse,Error>{
    let mut out = vec![0u8; MAX_EVM_RESULT];
    let slice = out.as_mut_slice();
    let mut signature: [u8; 65] = [0; 65];
    let mut retval: sgx_status_t = sgx_status_t::SGX_SUCCESS;
    let mut result_length: usize = 0;

    let mut prep: String = "".to_owned();
    for item in evm_input.preprocessor{
        prep.push_str(&item);
        prep.push(',');
    }
    prep.pop();

    let result = unsafe {
        ecall_evm(eid,
                  &mut retval,
                  evm_input.bytecode.as_ptr() as *const u8,
                  evm_input.bytecode.len(),
                  evm_input.callable.as_ptr() as *const u8,
                  evm_input.callable.len(),
                  evm_input.callable_args.as_ptr(),
                  evm_input.callable_args.len(),
                  //evm_input.preprocessor.as_ptr(),
                  prep.as_ptr(),
                  //evm_input.preprocessor.len(),
                  prep.len(),
                  evm_input.callback.as_ptr(),
                  evm_input.callback.len(),
                  slice.as_mut_ptr() as *mut u8,
                  &mut signature,
                  &mut result_length)
    };
    let part = Vec::from_iter(slice[0..result_length].iter().cloned());
    Ok(EvmResponse{
        errored: retval != sgx_status_t::SGX_SUCCESS,
        result: part.to_hex(),
        signature: signature.to_hex(),
    })
}

#[cfg(test)]
pub mod tests {
    #![allow(dead_code,unused_assignments,unused_variables)]
    use esgx;
    use std::fs::File;
    use std::io::{ BufReader, BufRead};
    use evm_u::evm;
    use super::EvmRequest;
    use sgx_urts::SgxEnclave;

    fn read_input_from_file(path: &str) -> evm::EvmInput {
        let file = match File::open(&path) {
            // The `description` method of `io::Error` returns a string that
            // describes the error
            Err(why) => panic!("couldn't open {}: {}", path,
                               why),
            Ok(file) => file,
        };

        let mut lines = BufReader::new(file).lines();
        let result = evm::EvmInput {
            data: lines.next().unwrap().unwrap(),
            code: lines.next().unwrap().unwrap(),
        };
        result
    }

    fn init_enclave() -> SgxEnclave{
        let enclave = match esgx::general::init_enclave_wrapper() {
            Ok(r) => {
                println!("[+] Init Enclave Successful {}!", r.geteid());
                r
            }
            Err(x) => {
                panic!("[-] Init Enclave Failed {}!", x.as_str());
            }
        };
        enclave
    }

    #[test]
    pub fn test_voting_contract() {
        let evm_input = EvmRequest {
            bytecode:"6080604052600436106101115763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630da6560081146101165780630de88fd8146101305780630ed70ed1146101a1578063236e1b93146101d4578063291ae9b3146101fb578063315a095d146102225780634e0e931a1461023a578063529a1baf146102585780635fc48d7e146102795780636cee7be5146102b15780639207891d14610354578063929ec53714610369578063ac2f00741461038a578063b0c095e31461045b578063b24fd5c514610497578063d2025b1d146104c8578063df78b81c14610579578063e7f7661914610591578063f43b8778146105a9578063fc0c546a146105c1575b600080fd5b34801561012257600080fd5b5061012e6004356105d6565b005b34801561013c57600080fd5b50610151600160a060020a03600435166107ef565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561018d578181015183820152602001610175565b505050509050019250505060405180910390f35b3480156101ad57600080fd5b506101c2600160a060020a036004351661085e565b60408051918252519081900360200190f35b3480156101e057600080fd5b506101c2600480359060248035908101910135604435610879565b34801561020757600080fd5b5061012e6004803590602480359081019101356044356109fb565b34801561022e57600080fd5b506101c2600435610d19565b34801561024657600080fd5b5061012e600435602435604435610e6f565b34801561026457600080fd5b506101c2600160a060020a036004351661105e565b34801561028557600080fd5b5061029d600435600160a060020a0360243516611070565b604080519115158252519081900360200190f35b3480156102bd57600080fd5b506102d5600435600160a060020a03602435166110f8565b6040518080602001838152602001828103825284818151815260200191508051906020019080838360005b83811015610318578181015183820152602001610300565b50505050905090810190601f1680156103455780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561036057600080fd5b506101c261125c565b34801561037557600080fd5b506101c2600160a060020a0360043516611262565b34801561039657600080fd5b506103a26004356112ed565b604051600160a060020a0388168152602081018760038111156103c157fe5b60ff16815260200186815260200185815260200184815260200180602001838152602001828103825284818151815260200191508051906020019080838360005b8381101561041a578181015183820152602001610402565b50505050905090810190601f1680156104475780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b34801561046757600080fd5b506104736004356113c3565b6040518082600381111561048357fe5b60ff16815260200191505060405180910390f35b3480156104a357600080fd5b506104ac61143a565b60408051600160a060020a039092168252519081900360200190f35b3480156104d457600080fd5b5060408051602060046024803582810135848102808701860190975280865261055b96843596369660449591949091019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a9989019892975090820195509350839250850190849080828437509497506114499650505050505050565b60408051938452602084019290925282820152519081900360600190f35b34801561058557600080fd5b50610151600435611503565b34801561059d57600080fd5b506101c26004356115e9565b3480156105b557600080fd5b5061012e600435611659565b3480156105cd57600080fd5b506104ac611850565b600354604080517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015290518392600160a060020a0316916370a082319160248083019260209291908290030181600087803b15801561063b57600080fd5b505af115801561064f573d6000803e3d6000fd5b505050506040513d602081101561066557600080fd5b505110156106bd576040805160e560020a62461bcd02815260206004820181905260248201527f5573657220646f6573206e6f74206861766520656e6f75676820746f6b656e73604482015290519081900360640190fd5b600354604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490529051600160a060020a03909216916323b872dd916064808201926020929091908290030181600087803b15801561073057600080fd5b505af1158015610744573d6000803e3d6000fd5b505050506040513d602081101561075a57600080fd5b505115156107d7576040805160e560020a62461bcd028152602060048201526024808201527f5573657220646964206e6f7420617070726f766520746f6b656e207472616e7360448201527f6665722e00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b33600090815260016020526040902080549091019055565b600160a060020a03811660009081526001602090815260409182902060020180548351818402810184019094528084526060939283018282801561085257602002820191906000526020600020905b81548152602001906001019080831161083e575b50505050509050919050565b600160a060020a031660009081526001602052604090205490565b60008060648611156108fb576040805160e560020a62461bcd02815260206004820152603460248201527f51756f72756d2050657263656e74616765206d757374206265206c657373207460448201527f68616e206f7220657175616c20746f2031303025000000000000000000000000606482015290519081900360840190fd5b5060028054600190810191829055600091825260208290526040909120805473ffffffffffffffffffffffffffffffffffffffff1916331774ff0000000000000000000000000000000000000000191681559081018690554283016006820155610969600482018686611a84565b507f45e74d302a4ed9fd7b7b46e4ac6ff1a3459046b18fcb30923f8af6f11ebdc26e33600254888888886040518087600160a060020a0316600160a060020a031681526020018681526020018581526020018060200183815260200182810382528585828181526020019250808284376040519201829003995090975050505050505050a15050600254949350505050565b600084600081118015610a1057506002548111155b1515610a54576040805160e560020a62461bcd0281526020600482015260146024820152600080516020611bd4833981519152604482015290519081900360640190fd5b6000610a5f876113c3565b6003811115610a6a57fe5b14610abf576040805160e560020a62461bcd02815260206004820152601160248201527f506f6c6c2068617320657870697265642e000000000000000000000000000000604482015290519081900360640190fd5b610ac98633611070565b15610b1e576040805160e560020a62461bcd02815260206004820152601760248201527f557365722068617320616c726561647920766f7465642e000000000000000000604482015290519081900360640190fd5b82610b283361085e565b1015610ba4576040805160e560020a62461bcd02815260206004820152602860248201527f5573657220646f6573206e6f74206861766520656e6f756768207374616b656460448201527f20746f6b656e732e000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b3360009081526001602081815260408084208a8552808401835281852088905560020180548085018255908552828520018a90558984528382529283902083516060810185529283528351601f8901839004830281018301909452878452945090918282019188908890819084018382808284375050509284525050506020908101859052336000908152600785018252604090208251815460ff19169015151781558282015180519192610c6192600185019290910190611b02565b50604091820151600290910155600583018054600181018255600091825260209182902001805473ffffffffffffffffffffffffffffffffffffffff19163390811790915582518181529182018990526060820186905260809282018381529282018790527fe95eb7d43e66fe71c9e83b9d854df9bbf195378b75da7c121b7910630d75387192909189918991899189919060a0820185858082843760405192018290039850909650505050505050a1505050505050565b600080610d2533611262565b90508281610d323361085e565b031015610daf576040805160e560020a62461bcd02815260206004820152602b60248201527f5573657220697320747279696e6720746f20776974686472617720746f6f206d60448201527f616e7920746f6b656e732e000000000000000000000000000000000000000000606482015290519081900360840190fd5b3360008181526001602090815260408083208054889003905560035481517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810195909552602485018890529051600160a060020a039091169363a9059cbb9360448083019493928390030190829087803b158015610e3157600080fd5b505af1158015610e45573d6000803e3d6000fd5b505050506040513d6020811015610e5b57600080fd5b50511515610e6857600080fd5b5090919050565b60008084600081118015610e8557506002548111155b1515610ec9576040805160e560020a62461bcd0281526020600482015260146024820152600080516020611bd4833981519152604482015290519081900360640190fd5b600454600160a060020a03163314610ee057600080fd5b6001610eeb876113c3565b6003811115610ef657fe5b14610f4b576040805160e560020a62461bcd02815260206004820152601960248201527f506f6c6c20686173206e6f742065787069726564207965742e00000000000000604482015290519081900360640190fd5b600086815260208190526040902060028101869055600381018590559250610f8d610f7c868663ffffffff61185f16565b60018501549063ffffffff61187216565b6002840154610fa390606463ffffffff61187216565b1191508115610fe457825474ff0000000000000000000000000000000000000000191674020000000000000000000000000000000000000000178355611018565b825474ff00000000000000000000000000000000000000001916740300000000000000000000000000000000000000001783555b6110218661189b565b60408051831515815290517fa09418b9290be8509b4127e8df442ca7ca9aa4be676367d2a5c6586ab14253449181900360200190a1505050505050565b60016020526000908152604090205481565b60008260008111801561108557506002548111155b15156110c9576040805160e560020a62461bcd0281526020600482015260146024820152600080516020611bd4833981519152604482015290519081900360640190fd5b5050600091825260208281526040808420600160a060020a039390931684526007909201905290205460ff1690565b60606000806000808660008111801561111357506002548111155b1515611157576040805160e560020a62461bcd0281526020600482015260146024820152600080516020611bd4833981519152604482015290519081900360640190fd5b6000611162896113c3565b600381111561116d57fe5b141561117857600080fd5b6111828888611070565b151561118d57600080fd5b600088815260208181526040808320600160a060020a038b168452600781018352928190206002808201546001928301805485519481161561010002600019011692909204601f8101869004860284018601909452838352949850965092945085928592909184918301828280156112465780601f1061121b57610100808354040283529160200191611246565b820191906000526020600020905b81548152906001019060200180831161122957829003601f168201915b5050505050915095509550505050509250929050565b60025481565b600160a060020a03811660009081526001602052604081208180805b60028401548210156112e3576002840180548390811061129a57fe5b90600052602060002001549050828460010160008381526020019081526020016000205411156112d857600081815260018501602052604090205492505b60019091019061127e565b5090949350505050565b600060208181529181526040908190208054600180830154600280850154600386015460048701805489516101009782161597909702600019011693909304601f81018a90048a0286018a01909852878552600160a060020a0386169860a060020a90960460ff16979396919590949193919291908301828280156113b35780601f10611388576101008083540402835291602001916113b3565b820191906000526020600020905b81548152906001019060200180831161139657829003601f168201915b5050505050908060060154905087565b6000816000811180156113d857506002548111155b151561141c576040805160e560020a62461bcd0281526020600482015260146024820152600080516020611bd4833981519152604482015290519081900360640190fd5b505060009081526020819052604090205460a060020a900460ff1690565b600454600160a060020a031681565b6000806000806000808651885114151561146257600080fd5b5060005b87518110156114f557878181518110151561147d57fe5b90602001906020020151600014156114b057868181518110151561149d57fe5b90602001906020020151820191506114ed565b87818151811015156114be57fe5b90602001906020020151600114156114ed5786818151811015156114de57fe5b90602001906020020151830192505b600101611466565b509697909695509350505050565b60608160008111801561151857506002548111155b151561155c576040805160e560020a62461bcd0281526020600482015260146024820152600080516020611bd4833981519152604482015290519081900360640190fd5b6000611567846113c3565b600381111561157257fe5b141561157d57600080fd5b60008381526020818152604091829020600501805483518184028101840190945280845290918301828280156115dc57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116115be575b5050505050915050919050565b6000816000811180156115fe57506002548111155b1515611642576040805160e560020a62461bcd0281526020600482015260146024820152600080516020611bd4833981519152604482015290519081900360640190fd5b505060009081526020819052604090206006015490565b8060008111801561166c57506002548111155b15156116b0576040805160e560020a62461bcd0281526020600482015260146024820152600080516020611bd4833981519152604482015290519081900360640190fd5b600082815260208190526040902054600160a060020a03163314611743576040805160e560020a62461bcd028152602060048201526024808201527f55736572206973206e6f74207468652063726561746f72206f6620746865207060448201527f6f6c6c2e00000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b6000808381526020819052604090205460a060020a900460ff16600381111561176857fe5b146117bd576040805160e560020a62461bcd02815260206004820152601860248201527f566f7465206973206e6f7420696e2070726f67726573732e0000000000000000604482015290519081900360640190fd5b6117c6826115e9565b42101561181d576040805160e560020a62461bcd02815260206004820152601d60248201527f566f74696e6720706572696f6420686173206e6f742065787069726564000000604482015290519081900360640190fd5b506000908152602081905260409020805474ff0000000000000000000000000000000000000000191660a060020a179055565b600354600160a060020a031681565b8181018281101561186c57fe5b92915050565b60008215156118835750600061186c565b5081810281838281151561189357fe5b041461186c57fe5b6118a3611b70565b600082815260208181526040808320815161010081019092528054600160a060020a0381168352849383019060a060020a900460ff1660038111156118e457fe5b60038111156118ef57fe5b8152602001600182015481526020016002820154815260200160038201548152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119aa5780601f1061197f576101008083540402835291602001916119aa565b820191906000526020600020905b81548152906001019060200180831161198d57829003601f168201915b5050505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015611a0c57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116119ee575b505050505081526020016006820154815250509250600091505b8260c0015151821015611a7e5760c0830151805183908110611a4457fe5b6020908102909101810151600160a060020a0381166000908152600180845260408083208984528201909452928120559201919050611a26565b50505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611ac55782800160ff19823516178555611af2565b82800160010185558215611af2579182015b82811115611af2578235825591602001919060010190611ad7565b50611afe929150611bb6565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b4357805160ff1916838001178555611af2565b82800160010185558215611af2579182015b82811115611af2578251825591602001919060010190611b55565b6040805161010081019091526000808252602082019081526020016000815260200160008152602001600081526020016060815260200160608152602001600081525090565b611bd091905b80821115611afe5760008155600101611bbc565b9056004e6f7420612076616c696420706f6c6c2049642e000000000000000000000000a165627a7a7230582040c244a9a5cdd0245c22298d0a10761ef0992310638db3ed807ef715d7cb4c230029".to_string(),
            callable: "countVotes(uint,uint[],uint[])".to_string(),
            //callable_args: "f84103f83cb83a32303561633335336137643465343064613639313366663637623562386335613834373734306538393739343738613965316264656239666336c101".to_string(),
            callable_args: "f84701f842b84032646466376330613665303131326433663161343437343334623762353031326239326236343065663239376431313764353431653335656564373632306564c101".to_string(),
            preprocessor: [].to_vec(),
            callback : "updatePollStatus(uint,uint,uint)".to_string(),
        };
        let enclave = init_enclave();
        let evm_result = match evm::exec_evm(enclave.geteid(), evm_input){
            Ok(v) => v,
            Err(e) => {
                println!("{}", e.to_string());

                return
            }
        };
        assert_eq!(evm_result.errored, false);
        assert_eq!(evm_result.result, "4e0e931a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000".to_string());
        enclave.destroy();
    }

    #[test]
    pub fn test_auction_contract() {
        let evm_input = EvmRequest {
            bytecode: "6080604052600436106101275763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632e1a7d4d811461012c5780632fb3c48f146101465780633197cbb61461017a57806331e37530146101a15780633a4b66f1146101c157806378e97925146101c957806388901205146101de5780638da5cb5b146102c85780638e7ea5b2146102dd578063b24fd5c5146102f2578063b88a802f14610307578063c19d93fb1461031c578063c1f5260414610355578063cb1e17cf1461036a578063d390b2d11461038e578063d6fbf20214610424578063dfbf53ae14610439578063e5afa5661461044e578063ef4cec1f1461046f578063f7b6d1a8146104a4578063fcc8f793146104c5578063fe67a54b14610569575b600080fd5b34801561013857600080fd5b5061014460043561057e565b005b34801561015257600080fd5b5061015e600435610627565b60408051600160a060020a039092168252519081900360200190f35b34801561018657600080fd5b5061018f61064f565b60408051918252519081900360200190f35b3480156101ad57600080fd5b506101446004803560248101910135610655565b61014461070a565b3480156101d557600080fd5b5061018f610745565b3480156101ea57600080fd5b50604080516020600480358082013583810280860185019096528085526102a595369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061074b9650505050505050565b60408051600160a060020a03909316835260208301919091528051918290030190f35b3480156102d457600080fd5b5061015e610756565b3480156102e957600080fd5b5061015e610765565b3480156102fe57600080fd5b5061015e61079c565b34801561031357600080fd5b506101446107ab565b34801561032857600080fd5b506103316107e8565b6040518082600281111561034157fe5b60ff16815260200191505060405180910390f35b34801561036157600080fd5b5061018f6107f8565b34801561037657600080fd5b50610144600160a060020a0360043516602435610623565b34801561039a57600080fd5b506103af600160a060020a03600435166107fe565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103e95781810151838201526020016103d1565b50505050905090810190601f1680156104165780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561043057600080fd5b5061018f610924565b34801561044557600080fd5b5061015e61092a565b34801561045a57600080fd5b5061018f600160a060020a0360043516610939565b34801561047b57600080fd5b50610490600160a060020a036004351661094b565b604080519115158252519081900360200190f35b3480156104b057600080fd5b5061018f600160a060020a0360043516610969565b3480156104d157600080fd5b506104e6600160a060020a0360043516610984565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561052d578181015183820152602001610515565b50505050905090810190601f16801561055a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561057557600080fd5b50610144610a32565b600260095460a060020a900460ff16600281111561059857fe5b146105a257600080fd5b600354600160a060020a03163314156105da5760055433600090815260076020526040902054038111156105d557600080fd5b6105f6565b336000908152600760205260409020548111156105f657600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610623573d6000803e3d6000fd5b5050565b600880548290811061063557fe5b600091825260209091200154600160a060020a0316905081565b60025481565b600254421061066357600080fd5b60045433600090815260076020526040902054101561068157600080fd5b33600090815260066020526040902061069e906001018383610a93565b503360009081526006602052604090205460ff1615156106d357336000908152600660205260409020805460ff191660011790555b6040805133815290517f417bd604b82c3fa277680a27ba0a50c43772789bdafa274544181c0a2b1e8ab59181900360200190a15050565b600060095460a060020a900460ff16600281111561072457fe5b1461072e57600080fd5b336000908152600760205260409020805434019055565b60015481565b600080935093915050565b600054600160a060020a031681565b6000600260095460a060020a900460ff16600281111561078157fe5b1461078b57600080fd5b50600354600160a060020a03165b90565b600954600160a060020a031681565b600260095460a060020a900460ff1660028111156107c557fe5b146107cf57600080fd5b600354600160a060020a031633146107e657600080fd5b565b60095460a060020a900460ff1681565b60055481565b60606108098261094b565b151561087657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5573657220686173206e6f7420626964646564207965742e0000000000000000604482015290519081900360640190fd5b600160a060020a038216600090815260066020908152604091829020600190810180548451600293821615610100026000190190911692909204601f8101849004840283018401909452838252909290918301828280156109185780601f106108ed57610100808354040283529160200191610918565b820191906000526020600020905b8154815290600101906020018083116108fb57829003601f168201915b50505050509050919050565b60045481565b600354600160a060020a031681565b60076020526000908152604090205481565b600160a060020a031660009081526006602052604090205460ff1690565b600160a060020a031660009081526007602052604090205490565b6006602090815260009182526040918290208054600180830180548651600261010094831615949094026000190190911692909204601f810186900486028301860190965285825260ff909216949293909290830182828015610a285780601f106109fd57610100808354040283529160200191610a28565b820191906000526020600020905b815481529060010190602001808311610a0b57829003601f168201915b5050505050905082565b600054600160a060020a03163314610a4957600080fd5b600060095460a060020a900460ff166002811115610a6357fe5b14610a6d57600080fd5b6009805474ff0000000000000000000000000000000000000000191660a060020a179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ad45782800160ff19823516178555610b01565b82800160010185558215610b01579182015b82811115610b01578235825591602001919060010190610ae6565b50610b0d929150610b11565b5090565b61079991905b80821115610b0d5760008155600101610b175600a165627a7a72305820a77ad5f2cf501f0a479f9a90a69a0bc5eeac3c151c013e4e671cb8af2a3ea6650029".to_string(),
            callable: "getHighestBidder(address[],uint[],uint[])".to_string(),
            callable_args: "dad59474733e055434b3a56acfab99bfec9ebd8d6c0de6c101c101".to_string(),
            preprocessor: [].to_vec(),
            callback : "updateWinner(address,uint)".to_string(),
        };
        let enclave = init_enclave();
        let evm_result = match evm::exec_evm(enclave.geteid(), evm_input){
            Ok(v) => v,
            Err(e) => {
                println!("{}", e.to_string());
                return
            }
        };
        assert_eq!(evm_result.errored, false);
        enclave.destroy();
    }

  /*  #[test]
    pub fn ae() {
        let evm_input = EvmRequest {
            bytecode:"60806040526004361061011c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632e1a7d4d81146101215780632fb3c48f1461013b5780633197cbb61461016f57806331e37530146101965780633a4b66f1146101b657806378e97925146101be57806388901205146101d35780638da5cb5b146102bd5780638e7ea5b2146102d2578063b24fd5c5146102e7578063b88a802f146102fc578063c19d93fb14610311578063c1f526041461034a578063cb1e17cf1461035f578063d390b2d114610383578063d6fbf20214610419578063dfbf53ae1461042e578063ef4cec1f14610443578063f7b6d1a814610478578063fcc8f79314610499578063fe67a54b1461053d575b600080fd5b34801561012d57600080fd5b50610139600435610552565b005b34801561014757600080fd5b506101536004356105fb565b60408051600160a060020a039092168252519081900360200190f35b34801561017b57600080fd5b50610184610623565b60408051918252519081900360200190f35b3480156101a257600080fd5b506101396004803560248101910135610629565b6101396106de565b3480156101ca57600080fd5b50610184610719565b3480156101df57600080fd5b506040805160206004803580820135838102808601850190965280855261029a95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061071f9650505050505050565b60408051600160a060020a03909316835260208301919091528051918290030190f35b3480156102c957600080fd5b506101536107d2565b3480156102de57600080fd5b506101536107e1565b3480156102f357600080fd5b50610153610818565b34801561030857600080fd5b50610139610827565b34801561031d57600080fd5b50610326610864565b6040518082600281111561033657fe5b60ff16815260200191505060405180910390f35b34801561035657600080fd5b50610184610874565b34801561036b57600080fd5b50610139600160a060020a036004351660243561087a565b34801561038f57600080fd5b506103a4600160a060020a036004351661091d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103de5781810151838201526020016103c6565b50505050905090810190601f16801561040b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561042557600080fd5b50610184610a43565b34801561043a57600080fd5b50610153610a49565b34801561044f57600080fd5b50610464600160a060020a0360043516610a58565b604080519115158252519081900360200190f35b34801561048457600080fd5b50610184600160a060020a0360043516610a76565b3480156104a557600080fd5b506104ba600160a060020a0360043516610a91565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105015781810151838201526020016104e9565b50505050905090810190601f16801561052e5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561054957600080fd5b50610139610b3f565b600260095460a060020a900460ff16600281111561056c57fe5b1461057657600080fd5b600354600160a060020a03163314156105ae5760055433600090815260076020526040902054038111156105a957600080fd5b6105ca565b336000908152600760205260409020548111156105ca57600080fd5b604051339082156108fc029083906000818181858888f193505050501580156105f7573d6000803e3d6000fd5b5050565b600880548290811061060957fe5b600091825260209091200154600160a060020a0316905081565b60025481565b600254421061063757600080fd5b60045433600090815260076020526040902054101561065557600080fd5b336000908152600660205260409020610672906001018383610ba0565b503360009081526006602052604090205460ff1615156106a757336000908152600660205260409020805460ff191660011790555b6040805133815290517f417bd604b82c3fa277680a27ba0a50c43772789bdafa274544181c0a2b1e8ab59181900360200190a15050565b600060095460a060020a900460ff1660028111156106f857fe5b1461070257600080fd5b336000908152600760205260409020805434019055565b60015481565b6000808080805b87518110156107c55781878281518110151561073e57fe5b906020019060200201511180156107835750858181518110151561075e57fe5b90602001906020020151878281518110151561077657fe5b9060200190602002015111155b156107bd57868181518110151561079657fe5b90602001906020020151915087818151811015156107b057fe5b9060200190602002015192505b600101610726565b5090969095509350505050565b600054600160a060020a031681565b6000600260095460a060020a900460ff1660028111156107fd57fe5b1461080757600080fd5b50600354600160a060020a03165b90565b600954600160a060020a031681565b600260095460a060020a900460ff16600281111561084157fe5b1461084b57600080fd5b600354600160a060020a0316331461086257600080fd5b565b60095460a060020a900460ff1681565b60055481565b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03841690811790915560058290556009805474ff0000000000000000000000000000000000000000191674020000000000000000000000000000000000000000179055604080519182526020820183905280517f9c2270628a9b29d30ae96b6c4c14ed646ee134febdce38a5b77f2bde9cea2e209281900390910190a15050565b606061092882610a58565b151561099557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5573657220686173206e6f7420626964646564207965742e0000000000000000604482015290519081900360640190fd5b600160a060020a038216600090815260066020908152604091829020600190810180548451600293821615610100026000190190911692909204601f810184900484028301840190945283825290929091830182828015610a375780601f10610a0c57610100808354040283529160200191610a37565b820191906000526020600020905b815481529060010190602001808311610a1a57829003601f168201915b50505050509050919050565b60045481565b600354600160a060020a031681565b600160a060020a031660009081526006602052604090205460ff1690565b600160a060020a031660009081526007602052604090205490565b6006602090815260009182526040918290208054600180830180548651600261010094831615949094026000190190911692909204601f810186900486028301860190965285825260ff909216949293909290830182828015610b355780601f10610b0a57610100808354040283529160200191610b35565b820191906000526020600020905b815481529060010190602001808311610b1857829003601f168201915b5050505050905082565b600054600160a060020a03163314610b5657600080fd5b600060095460a060020a900460ff166002811115610b7057fe5b14610b7a57600080fd5b6009805474ff0000000000000000000000000000000000000000191660a060020a179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610be15782800160ff19823516178555610c0e565b82800160010185558215610c0e579182015b82811115610c0e578235825591602001919060010190610bf3565b50610c1a929150610c1e565b5090565b61081591905b80821115610c1a5760008155600101610c245600a165627a7a723058209c73b98ebe12c8d53e49afc0e363b10ed68825eaf6e81655c2882debf96af71e0029".to_string(),
            callable: "getHighestBidder(address[],uint[])".to_string(),
            callable_args: //Temp value, includes preprocessor
            "d8d59474733e055434b3a56acfab99bfec9ebd8d6c0de6c101".to_string(),
            preprocessor: [].to_vec(),
            callback : "updateWinner(address,uint)".to_string(),
        };
        let enclave = init_enclave();
        let evm_result = match evm::exec_evm(enclave.geteid(), evm_input){
            Ok(v) => v,
            Err(e) => {
                println!("{}", e.to_string());
                return
            }
        };
        assert_eq!(evm_result.errored, false);
        assert!((evm_result.result == "d10e1e690000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000004b8d2c72980af7e6a0952f87146d6a225922acd70000000000000000000000001d1b9890d277de99fa953218d4c02cac764641d7" )
            ||
            (evm_result.result == "d10e1e690000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000001d1b9890d277de99fa953218d4c02cac764641d70000000000000000000000004b8d2c72980af7e6a0952f87146d6a225922acd7"));
        enclave.destroy();
    }
*/

    #[test]
    pub fn addition() {
        let evm_input = EvmRequest {
            bytecode:"606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063ef9fc50b146044575b600080fd5b3415604e57600080fd5b606b60048080359060200190919080359060200190919050506081565b6040518082815260200191505060405180910390f35b600080828401905080915050929150505600a165627a7a72305820be9168caee2bd3045c4563ce44f698916986a5ad7b2148f91a35093d31d7211b0029".to_string(),
            callable: "addNumbers(uint,uint)".to_string(),
            callable_args: "c36481c8".to_string(),
            preprocessor: [].to_vec(),
            callback : "".to_string(),
        };
        let enclave = init_enclave();
        let evm_result = match evm::exec_evm(enclave.geteid(), evm_input){
            Ok(v) => v,
            Err(e) => {
                println!("{}", e.to_string());
                return
            }
        };
        // Callback is not supplied, which results in error
        assert_eq!(evm_result.errored, true);
        enclave.destroy();
    }

    #[test]
    pub fn mix_addresses() {
        let evm_input = EvmRequest {
            bytecode: "6080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806303988f84146100ca57806310f11e84146101705780632aaf281b1461026c5780633b833245146102fa57806357f5fc28146103415780636db0c8f0146103f7578063850d86191461049357806385e3c463146104b9578063a06a585614610529578063b24fd5c514610590578063daefe738146105e7578063dd20866e14610659578063ed0b494c14610735575b600080fd5b3480156100d657600080fd5b506100f56004803603810190808035906020019092919050505061080a565b604051808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200188600019166000191681526020018781526020018681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390f35b34801561017c57600080fd5b50610185610881565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b838110156101d05780820151818401526020810190506101b5565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156102125780820151818401526020810190506101f7565b50505050905001848103825285818151815260200191508051906020019060200280838360005b83811015610254578082015181840152602081019050610239565b50505050905001965050505050505060405180910390f35b6102d6600480360381019080803563ffffffff169060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610ab7565b604051808260018111156102e657fe5b60ff16815260200191505060405180910390f35b34801561030657600080fd5b5061032b600480360381019080803563ffffffff169060200190929190505050610f82565b6040518082815260200191505060405180910390f35b34801561034d57600080fd5b5061037c600480360381019080803563ffffffff16906020019092919080359060200190929190505050610fb5565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103bc5780820151818401526020810190506103a1565b50505050905090810190601f1680156103e95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561040357600080fd5b5061047d6004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080356000191690602001909291908035906020019092919080359060200190929190505050611095565b6040518082815260200191505060405180910390f35b6104b7600480360381019080803563ffffffff169060200190929190505050611108565b005b3480156104c557600080fd5b50610527600480360381019080803590602001909291908035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929050505061122c565b005b34801561053557600080fd5b5061056c60048036038101908080356000191690602001909291908035906020019092919080359060200190929190505050611230565b6040518082600181111561057c57fe5b60ff16815260200191505060405180910390f35b34801561059c57600080fd5b506105a5611589565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156105f357600080fd5b50610618600480360381019080803563ffffffff1690602001909291905050506115ae565b604051808760001916600019168152602001868152602001858152602001848152602001838152602001828152602001965050505050505060405180910390f35b34801561066557600080fd5b506106d7600480360381019080803563ffffffff16906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290803590602001909291905050506116da565b6040518083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015610720578082015181840152602081019050610705565b50505050905001935050505060405180910390f35b34801561074157600080fd5b506107f46004803603810190808035906020019082018035906020019080806020026020016040519081016040528093929190818152602001838360200280828437820191505050505050919291929080356000191690602001909291908035906020019092919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284378201915050505050509192919290505050611877565b6040518082815260200191505060405180910390f35b60018181548110151561081957fe5b90600052602060002090600b02016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169080600101549080600301549080600401549080600501549080600601549080600701549080600a0154905088565b60608060608060608060006001805490506040519080825280602002602001820160405280156108c05781602001602082028038833980820191505090505b5093506001805490506040519080825280602002602001820160405280156108f75781602001602082028038833980820191505090505b50925060018054905060405190808252806020026020018201604052801561092e5781602001602082028038833980820191505090505b509150600090505b600180549050811015610aa55760018181548110151561095257fe5b90600052602060002090600b0201600a0154848281518110151561097257fe5b9060200190602002018181525050600060018281548110151561099157fe5b90600052602060002090600b020160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115610a0557600183828151811015156109f657fe5b90602001906020020181815250505b3373ffffffffffffffffffffffffffffffffffffffff16600182815481101515610a2b57fe5b90600052602060002090600b020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610a985760018282815181101515610a8957fe5b90602001906020020181815250505b8080600101915050610936565b83838396509650965050505050909192565b600080600034111515610b32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4465706f7369742076616c7565206d75737420626520706f7369746976652e0081525060200191505060405180910390fd5b600060018563ffffffff16815481101515610b4957fe5b90600052602060002090600b0201600a0154141515610bd0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f496c6c6567616c20737461746520666f72206465706f736974732e000000000081525060200191505060405180910390fd5b60018463ffffffff16815481101515610be557fe5b90600052602060002090600b020190506000816006015434811515610c0657fe5b06141515610ca2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001807f4465706f7369742076616c7565206d7573742062652061206d756c7469706c6581526020017f206f6620636c61696d2076616c7565000000000000000000000000000000000081525060400191505060405180910390fd5b60008160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141515610d81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001807f43616e6e6f74206465706f73697420747769636520776974682074686520736181526020017f6d6520616464726573730000000000000000000000000000000000000000000081525060400191505060405180910390fd5b348160030160008282540192505081905550348160020160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082816008018260040154815481101515610def57fe5b906000526020600020019080519060200190610e0c9291906119bf565b50600181600401600082825401925050819055508363ffffffff163373ffffffffffffffffffffffffffffffffffffffff167fce7036acc3606aaa1ec3a2e7b4d13b3f4da34ee1eac298fc47524074de74a3bf8534600160405180806020018481526020018315151515815260200180602001838103835286818151815260200191508051906020019080838360005b83811015610eb7578082015181840152602081019050610e9c565b50505050905090810190601f168015610ee45780820380516001836020036101000a031916815260200191505b50838103825260088152602001807f616c6c20676f6f640000000000000000000000000000000000000000000000008152506020019550505050505060405180910390a380600701548160040154101515610f7757600181600a01819055508363ffffffff167fa98c11bc69afe22b520fe800f82e421f9594d4f06259a7600711b75af05a43b960405160405180910390a25b600091505092915050565b600060018263ffffffff16815481101515610f9957fe5b90600052602060002090600b0201600801805490509050919050565b606060018363ffffffff16815481101515610fcc57fe5b90600052602060002090600b020160080182815481101515610fea57fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110885780601f1061105d57610100808354040283529160200191611088565b820191906000526020600020905b81548152906001019060200180831161106b57829003601f168201915b5050505050905092915050565b60008385848151811015156110a657fe5b90602001906020020190600019169081600019168152505082806001019350506110cf82611916565b85848151811015156110dd57fe5b9060200190602002019060001916908160001916815250508280600101935050829050949350505050565b600060608060018463ffffffff1681548110151561112257fe5b90600052602060002090600b02019250604080519080825280601f01601f1916602001820160405280156111655781602001602082028038833980820191505090505b50915060016040519080825280602002602001820160405280156111985781602001602082028038833980820191505090505b5090507f72616e64282900000000000000000000000000000000000000000000000000008160008151811015156111cb57fe5b9060200190602002019060001916908160001916815250508363ffffffff167fb37f76c8ba24e6a6d20d203681329001f2cacd9ab37c09d8b2aee57b8a31b8746001604051808215151515815260200191505060405180910390a250505050565b5050565b60008060018054905090506001805480919060010161124f9190611a3f565b503360018263ffffffff1681548110151561126657fe5b90600052602060002090600b020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460018263ffffffff168154811015156112cb57fe5b90600052602060002090600b02016001018160001916905550600060018263ffffffff168154811015156112fb57fe5b90600052602060002090600b020160030181905550600060018263ffffffff1681548110151561132757fe5b90600052602060002090600b0201600401819055504260018263ffffffff1681548110151561135257fe5b90600052602060002090600b0201600501819055508360018263ffffffff1681548110151561137d57fe5b90600052602060002090600b0201600601819055508260018263ffffffff168154811015156113a857fe5b90600052602060002090600b020160070181905550826040519080825280602002602001820160405280156113f157816020015b60608152602001906001900390816113dc5790505b5060018263ffffffff1681548110151561140757fe5b90600052602060002090600b0201600801908051906020019061142b929190611a71565b508260405190808252806020026020018201604052801561145b5781602001602082028038833980820191505090505b5060018263ffffffff1681548110151561147157fe5b90600052602060002090600b02016009019080519060200190611495929190611ad1565b50600060018263ffffffff168154811015156114ad57fe5b90600052602060002090600b0201600a01819055508063ffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c2ac5e09d37c38a96fb20791b6ed6f2ccaaaf26c4115680b9257504d32bcdc34288888860016040518086815260200185600019166000191681526020018481526020018381526020018215151515815260200180602001828103825260088152602001807f616c6c20676f6f64000000000000000000000000000000000000000000000000815250602001965050505050505060405180910390a360009150509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060008060008060008060008060018d63ffffffff168154811015156115d557fe5b90600052602060002090600b020160010154955060018d63ffffffff168154811015156115fe57fe5b90600052602060002090600b020160070154945060018d63ffffffff1681548110151561162757fe5b90600052602060002090600b020160060154935060018d63ffffffff1681548110151561165057fe5b90600052602060002090600b020160040154925060018d63ffffffff1681548110151561167957fe5b90600052602060002090600b020160030154915060018d63ffffffff168154811015156116a257fe5b90600052602060002090600b02016009018054905090508585858585859b509b509b509b509b509b5050505050505091939550919395565b600060606000806000865192505b600083111561185d5782600187016040518082815260200191505060405180910390206001900481151561171857fe5b069150866001840381518110151561172c57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff16878381518110151561175a57fe5b9060200190602002015173ffffffffffffffffffffffffffffffffffffffff1614151561184f57866001840381518110151561179257fe5b90602001906020020151905086828151811015156117ac57fe5b9060200190602002015187600185038151811015156117c757fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080878381518110151561181257fe5b9060200190602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b8280600190039350506116e8565b87878163ffffffff16915094509450505050935093915050565b60008084868581518110151561188957fe5b9060200190602002019060001916908160001916815250508380600101945050600090505b825181101561190a5782818151811015156118c557fe5b9060200190602002015186858151811015156118dd57fe5b906020019060200201906000191690816000191681525050838060010194505080806001019150506118ae565b83915050949350505050565b600080821415611948577f300000000000000000000000000000000000000000000000000000000000000090506119b7565b5b60008211156119b657610100816001900481151561196357fe5b0460010290507f01000000000000000000000000000000000000000000000000000000000000006030600a8481151561199857fe5b06010260010281179050600a828115156119ae57fe5b049150611949565b5b809050919050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611a0057805160ff1916838001178555611a2e565b82800160010185558215611a2e579182015b82811115611a2d578251825591602001919060010190611a12565b5b509050611a3b9190611b5b565b5090565b815481835581811115611a6c57600b0281600b028360005260206000209182019101611a6b9190611b80565b5b505050565b828054828255906000526020600020908101928215611ac0579160200282015b82811115611abf578251829080519060200190611aaf929190611c1e565b5091602001919060010190611a91565b5b509050611acd9190611c9e565b5090565b828054828255906000526020600020908101928215611b4a579160200282015b82811115611b495782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611af1565b5b509050611b579190611cca565b5090565b611b7d91905b80821115611b79576000816000905550600101611b61565b5090565b90565b611c1b91905b80821115611c1757600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560038201600090556004820160009055600582016000905560068201600090556007820160009055600882016000611bf69190611d0d565b600982016000611c069190611d2e565b600a82016000905550600b01611b86565b5090565b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611c5f57805160ff1916838001178555611c8d565b82800160010185558215611c8d579182015b82811115611c8c578251825591602001919060010190611c71565b5b509050611c9a9190611b5b565b5090565b611cc791905b80821115611cc35760008181611cba9190611d4f565b50600101611ca4565b5090565b90565b611d0a91905b80821115611d0657600081816101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905550600101611cd0565b5090565b90565b5080546000825590600052602060002090810190611d2b9190611c9e565b50565b5080546000825590600052602060002090810190611d4c9190611b5b565b50565b50805460018160011615610100020316600290046000825580601f10611d755750611d94565b601f016020900490600052602060002090810190611d939190611b5b565b5b505600a165627a7a7230582015e1ffcde24bd26665fce5d7ea291f46d78d6cb87bc9fcf054851313b919bbef0029".to_string(),
            callable: "mixAddresses(uint32,address[],uint)".to_string(),
            callable_args: //Temp value, includes preprocessor
 "f9012006f9011cb88c3136336437316531643830303261356461343333366239666263646236636263323061303663323734346663663931353537393138613332663739666563666135343538316264616232623664363932356439353531316533366166376364356564393862386137613961353631303730303066303030313032303330343035303630373038303930613062b88c3136336437346337643130363231303661613331313639356262386436656365356361663662373634346663663836313565396566663332383263626538663832373239313964356234623238336330376439353235313835353862323435656637633538616531643061363135396230333562303030313032303330343035303630373038303930613062".to_string(),
            preprocessor: ["rand".to_string()].to_vec(),
            callback : "distribute(uint32,address[])".to_string(),
        };
        let enclave = init_enclave();
        let evm_result = match evm::exec_evm(enclave.geteid(), evm_input){
            Ok(v) => v,
            Err(e) => {
                println!("{}", e.to_string());
                return
            }
        };
        assert_eq!(evm_result.errored, false);
        assert!((evm_result.result == "d10e1e690000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000004b8d2c72980af7e6a0952f87146d6a225922acd70000000000000000000000001d1b9890d277de99fa953218d4c02cac764641d7" )
        ||
                    (evm_result.result == "d10e1e690000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000001d1b9890d277de99fa953218d4c02cac764641d70000000000000000000000004b8d2c72980af7e6a0952f87146d6a225922acd7"));
        //TODO add assert about signature correctness
        enclave.destroy();
    }


    #[test]
    pub fn test_billionaire_contract() {
        let evm_input = EvmRequest {
// Bytecode of the following contract
// contract Billionaire {
//
//            string winner;
//
//            function check(string n_one, uint one, string n_two, uint two, string n_three, uint three)
//            public
//            pure
//            returns (string){
//                string memory max = n_one;
//                if (two >= one && two >= three) {
//                    max = n_two;
//                }
//                if (three >= two && three >= one) {
//                    max = n_three;
//                }
//                return max;
//            }
//
//            function commit(string name)
//            public {
//                winner = name;
//            }
//
//            function get_winner() public view returns(string) {
//                return winner;
//        }
            bytecode: "608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637bcd540f1461005c5780639867db74146101e8578063bb4c4f1c14610251575b600080fd5b34801561006857600080fd5b5061016d600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506102e1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ad578082015181840152602081019050610192565b50505050905090810190601f1680156101da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f457600080fd5b5061024f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610327565b005b34801561025d57600080fd5b50610266610341565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102a657808201518184015260208101905061028b565b50505050905090810190601f1680156102d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060808790508685101580156102f75750828510155b15610300578590505b8483101580156103105750868310155b15610319578390505b809150509695505050505050565b806000908051906020019061033d9291906103e3565b5050565b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103d95780601f106103ae576101008083540402835291602001916103d9565b820191906000526020600020905b8154815290600101906020018083116103bc57829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061042457805160ff1916838001178555610452565b82800160010185558215610452579182015b82811115610451578251825591602001919060010190610436565b5b50905061045f9190610463565b5090565b61048591905b80821115610481576000816000905550600101610469565b5090565b905600a165627a7a72305820939c010c27b4d409b39dd893d0ae05cf92ff5728c8365ec24bd3d4116f2f53220029".to_string(),

            callable: "check(string,uint,string,uint,string,uint)".to_string(),
            // RLP-encoded: [1,"aaa",2,"bbb",3,"ccc"]
            callable_args: "cf836161610183626262028363636303".to_string(),
            preprocessor: [].to_vec(),
            callback : "commit(string)".to_string(),
        };
        let enclave = init_enclave();
        let evm_result = match evm::exec_evm(enclave.geteid(), evm_input){
            Ok(v) => v,
            Err(e) => {
                println!("{}", e.to_string());
                return
            }
        };
        assert_eq!(evm_result.errored, false);
        assert_eq!(evm_result.result,  "9867db74000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000036363630000000000000000000000000000000000000000000000000000000000".to_string());
        enclave.destroy();
    }

    #[test]
    pub fn test_billionaire_encrypted() {
        let evm_input = EvmRequest {
            bytecode: "608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680637bcd540f1461005c5780639867db74146101e8578063bb4c4f1c14610251575b600080fd5b34801561006857600080fd5b5061016d600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291905050506102e1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ad578082015181840152602081019050610192565b50505050905090810190601f1680156101da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f457600080fd5b5061024f600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610327565b005b34801561025d57600080fd5b50610266610341565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102a657808201518184015260208101905061028b565b50505050905090810190601f1680156102d35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060808790508685101580156102f75750828510155b15610300578590505b8483101580156103105750868310155b15610319578390505b809150509695505050505050565b806000908051906020019061033d9291906103e3565b5050565b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103d95780601f106103ae576101008083540402835291602001916103d9565b820191906000526020600020905b8154815290600101906020018083116103bc57829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061042457805160ff1916838001178555610452565b82800160010185558215610452579182015b82811115610451578251825591602001919060010190610436565b5b50905061045f9190610463565b5090565b61048591905b80821115610481576000816000905550600101610469565b5090565b905600a165627a7a72305820939c010c27b4d409b39dd893d0ae05cf92ff5728c8365ec24bd3d4116f2f53220029".to_string(),

            callable: "check(string,uint,string,uint,string,uint)".to_string(),
            // RLP-encoded: [encrypted 1,"aaa",encrypted 2,"bbb",encrypted 3,"ccc"]
            callable_args: "f8ea83616161b84832363435343561336530343431383366353432616364393962633539356639663438616166353630633039363433303530303031303230333034303530363037303830393061306283626262b84832363435343561336530343431383363393932646439663538626363333730363436333332636162323039386632363130303031303230333034303530363037303830393061306283636363b848323634353435613365303434313833646464643064356431393934306566373134336262396265643830396436326264303030313032303330343035303630373038303930613062".to_string(),
            preprocessor: [].to_vec(),
            callback : "commit(string)".to_string(),
        };
        let enclave = init_enclave();
        let evm_result = match evm::exec_evm(enclave.geteid(), evm_input){
            Ok(v) => v,
            Err(e) => {
                println!("{}", e.to_string());
                return
            }
        };
        assert_eq!(evm_result.errored, false);
        assert_eq!(evm_result.result, "9867db74000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000036363630000000000000000000000000000000000000000000000000000000000".to_string());
        enclave.destroy();
    }

    #[test]
    pub fn test_billionaire_with_bool() {
        let evm_input = EvmRequest {
//      contract Billionare {
//            string winner;
//            function check(string n_one, uint one, string n_two, uint two, string n_three, uint three, bool a)
//            public
//            pure
//            returns (string){
//              string memory max = n_one;
//              if(!a){ return "";}
//              if (two >= one && two >= three) {
//                  max = n_two;
//              }
//              if (three >= two && three >= one) {
//                  max = n_three;
//              }
//
//              return max;
//            }
//            function commit(string name)
//            public {
//              winner = name;
//            }
//            function get_winner() public view returns(string) {
//              return winner;
//            }
//      }
            bytecode: "608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063748c8b561461005c5780639867db74146101f4578063bb4c4f1c1461025d575b600080fd5b34801561006857600080fd5b50610179600480360381019080803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001909291908035151590602001909291905050506102ed565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101b957808201518184015260208101905061019e565b50505050905090810190601f1680156101e65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020057600080fd5b5061025b600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610354565b005b34801561026957600080fd5b5061027261036e565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102b2578082015181840152602081019050610297565b50505050905090810190601f1680156102df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060808890508215156103125760206040519081016040528060008152509150610348565b8786101580156103225750838610155b1561032b578690505b85841015801561033b5750878410155b15610344578490505b8091505b50979650505050505050565b806000908051906020019061036a929190610410565b5050565b606060008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104065780601f106103db57610100808354040283529160200191610406565b820191906000526020600020905b8154815290600101906020018083116103e957829003601f168201915b5050505050905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061045157805160ff191683800117855561047f565b8280016001018555821561047f579182015b8281111561047e578251825591602001919060010190610463565b5b50905061048c9190610490565b5090565b6104b291905b808211156104ae576000816000905550600101610496565b5090565b905600a165627a7a723058206f0d5f44e0e2b23b717de1c46d45ee75b7660bf9d82e379aeb63ad7a8de85a8c0029".to_string(),

            callable: "check(string,uint,string,uint,string,uint,bool)".to_string(),
            // RLP-encoded: [1,"aaa",2,"bbb",3,"ccc", True]
            callable_args: "d083616161018362626202836363630301".to_string(),
            preprocessor: [].to_vec(),
            callback : "commit(string)".to_string(),
        };
        let enclave = init_enclave();
        let evm_result = match evm::exec_evm(enclave.geteid(), evm_input){
            Ok(v) => v,
            Err(e) => {
                println!("{}", e.to_string());
                return
            }
        };
        assert_eq!(evm_result.errored, false);
        assert_eq!(evm_result.result, "9867db74000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000036363630000000000000000000000000000000000000000000000000000000000".to_string());
        enclave.destroy();
    }


    #[test]
    pub fn test_millionaire_contract() {
        let evm_input = EvmRequest {
            bytecode: "60806040526004361061008d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663191a09c681146100925780633fa4f245146100b957806347ce9402146100ce57806355241077146101c45780636c2506b7146101de5780638da5cb5b14610275578063b24fd5c5146102b3578063c14731ca146102c8575b600080fd5b34801561009e57600080fd5b506100a76102e0565b60408051918252519081900360200190f35b3480156100c557600080fd5b506100a76102e6565b3480156100da57600080fd5b506100e66004356102ec565b604051808060200180602001838103835285818151815260200191508051906020019080838360005b8381101561012757818101518382015260200161010f565b50505050905090810190601f1680156101545780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561018757818101518382015260200161016f565b50505050905090810190601f1680156101b45780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156101d057600080fd5b506101dc600435610468565b005b3480156101ea57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101dc94369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506104bd9650505050505050565b34801561028157600080fd5b5061028a610553565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156102bf57600080fd5b5061028a61056f565b3480156102d457600080fd5b506100a760043561058b565b60005481565b60025481565b6060806102f761058e565b60608060018681548110151561030957fe5b60009182526020918290206040805160029384029092018054600181161561010002600019011693909304601f810185900490940282016060908101825290820184815291938492918491908401828280156103a65780601f1061037b576101008083540402835291602001916103a6565b820191906000526020600020905b81548152906001019060200180831161038957829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104485780601f1061041d57610100808354040283529160200191610448565b820191906000526020600020905b81548152906001019060200180831161042b57829003601f168201915b505050919092525050815160209092015191989197509095505050505050565b60045473ffffffffffffffffffffffffffffffffffffffff16331461048c57600080fd5b60028190556040517ffa6b2fa56bfe305041a2170756c9ee87984e5078d2533f89642c6ded5ff6a90290600090a150565b6104c561058e565b5060408051808201909152828152602080820183905260018054808201808355600092909252835180519293859360029093027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6019261052892849201906105a5565b50602082810151805161054192600185019201906105a5565b50506000805460010190555050505050565b60035473ffffffffffffffffffffffffffffffffffffffff1681565b60045473ffffffffffffffffffffffffffffffffffffffff1681565b90565b604080518082019091526060808252602082015290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106105e657805160ff1916838001178555610613565b82800160010185558215610613579182015b828111156106135782518255916020019190600101906105f8565b5061061f929150610623565b5090565b61058b91905b8082111561061f57600081556001016106295600a165627a7a72305820c8d6a576c5e74a7db3fd9d19b9e8cb9e41c4360f1d517647e9b5d748026c47650029".to_string(),
            callable: "saveValue(uint)".to_string(),
            callable_args: //Temp value, includes preprocessor
            "f83cb83a37646164303138376366383430386262353537383532383734396266373333376130373935363734653664343138623961386163343432646236".to_string(),
            preprocessor: [].to_vec(),
            callback : "setValue(uint)".to_string(),
        };
        let enclave = init_enclave();
        let evm_result = match evm::exec_evm(enclave.geteid(), evm_input){
            Ok(v) => v,
            Err(e) => {
                println!("{}", e.to_string());
                return
            }
        };
        assert_eq!(evm_result.errored, false);
        assert_eq!(evm_result.result, "55241077000000000000000000000000000000000000000000000000000000000000000a");

        //TODO add assert about signature correctness
        enclave.destroy();
    }

}